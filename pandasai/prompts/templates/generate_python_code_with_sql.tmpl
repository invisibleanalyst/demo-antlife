<tables>
{% for df in context.dfs %}<table{% if df.name %} name="{{df.name}}"{% endif %}{% if df.description %} description="{{df.name}}"{% endif %}>
dfs[{{loop.index-1}}]:{{df.rows_count}}x{{df.columns_count}}
{{df.to_csv()}}</table>{% endfor %}
</tables>

{% if context.skills_manager.has_skills() %}
{{context.skills_manager.prompt_display()}}
{% else %}
You can call the following functions that have been pre-defined for you:
{% endif %}
<function>
def execute_sql_query(sql_query: str) -> pd.Dataframe
    """This method connects to the database, executes the sql query and returns the dataframe"""
</function>

{{ context.memory.get_previous_conversation() }}

{% if last_code_generated != "" and context.memory.count() > 0 %}
{{ last_code_generated }}
{% else %}
Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: {% include 'shared/output_type_template.tmpl' with context %}
```
{% endif %}

{{ context.memory.get_last_message() }}
Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.
{% if viz_lib %}
If you are asked to plot a chart, use "{{viz_lib}}" for charts, save as png.
{% endif %}

Generate python code and return full updated code: